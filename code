#Loading required packages and constants
library(rjson) 
library(stringr)
library(ggplot2)
library(caret) 

#Import data and separate shops
TVData_Merged <- fromJSON(file="/Users/user/Desktop/TVs-all-merged.json")  
TVData <- list()
counter = 1
for (i in 1:length(TVData_Merged)){
  temp = length(TVData_Merged[[i]])
  if(temp != 1){
    for (j in 1:temp) {
      TVData[counter+j-1] = TVData_Merged[[i]][j]
    }
    counter = counter + temp
  }else{
    TVData[counter] = TVData_Merged[[i]]
    counter = counter+1
  }
}
remove(TVData_Merged,i,j,temp,counter)

#function diff_brand: compare if the brands are different
diff_brand <- function(product_i,product_j){
  i_brand = BrandName(product_i)
  j_brand = BrandName(product_j
  if(is.null(i_brand)| is.null(j_brand)){
    return(FALSE)
  }else{
    if(i_brand != j_brand){
      return(TRUE)
    }else {
      return(FALSE)
    }
  }
}
#function Same_shop: true if the shop is the same for product i and j
Same_shop <- function(product_i,product_j){
  if(product_i[["shop"]] == product_j[["shop"]]  ){
    return(TRUE)
  }else {
    return(FALSE)
  }
}

#function Compar_Name: make certain that names are comparable
Compar_Name <- function(brand){
  
  brand = tolower(brand)
  if(brand == "lg electronics"){brand = "lg"}
  else if(brand == "sceptre inc"){brand = "sceptre"}
  else if(brand == "jvc tv"){brand = "jvc"}
  return(brand)
  
}

#function BandSizes: calculate all integral 
BandSizes <-function(HASHNUMBER){
  temp = c(1:HASHNUMBER)
  bandsizes = 1
  for (i in 2:length(temp)) {
    if(is.na(HASHNUMBER %%temp[i] ==0)) 
      bandsizes = c(bandsizes,temp[i])
  }
  else {HASHNUMBER %%temp[i] = FALSE)}
  return(bandsizes)
}

#function TV_titles: Have all TVtitles in one list
TV_titles <- function(TVData){
  #Get a list of product titles
  allTV_titles <- list()
  for (i in 1:length(TVData)){
    allTV_titles[i] = TVData[[i]][["title"]]
  }
  return(allTV_titles)
}

#function All_brands: get all the brands
All_brands <- function(ProductData){
	
  allbrands = c()
  for(i in 1:length(ProductData)){
    brand = ProductData[i]$featuresMap$Brand
    if(!is.null(brand)){
      allbrands = append(allbrands, brand)
    }
  }
  return(unique(allbrands))
}

#FUNCTION SplitString: split the string in a loop
SplitString <-function(string){
  substrings = vector()
  for (i in 1:(nchar(string)-1)) {
    substrings = c( substrings, substr(string, i, i+1))
  }
  return(substrings)
}

#FUNCTION CalcSim: calculate the Sørensen–Dice similarity
CalcSim <- function(string1,string2,SUBSTRINGSIZE){
  string1 = tolower(str_replace_all(string1, " ", ""))
  string2 = tolower(str_replace_all(string2, " ", ""))
  
  substrings1 = SplitString(string1)
  substrings2 = SplitString(string2)
  
  nt = 0 # number of character bigrams found in both strings
  for (i in 1:length(substrings1)) {
    substring_i = substrings1[i]
    for (j in 1:length(substrings2)) {
      substring_j = substrings2[j]
      if(substring_i == substring_j ){
        nt = nt + 1
      }
    }
  }
  Similarity = 2*nt / (length(substrings1) +  length(substrings2))
  return(Similarity)
}

#function MW: Model words
MW <- function(nmk){
  Modelwords = vector()
  for (i in 1:length(nmk)) {
    regResult = gregexpr("(^\\d+(\\.\\d+)?[a-zA-Z\"]+$|ˆ\\d+(\\.\\d+)?$)",nmk[i])
    if( attr(regResult[[1]], 'match.length') == -1 ){
      next
    }
    wordlist = regmatches(nmk[i], regResult)
    for (j in 1:length(wordlist[[1]])) {
      Word = wordlist[[1]][j]
      if(!any(Modelwords==Word)){
        Modelwords = c(Modelwords, Word)
      }
    }
  }
  return(Modelwords)
}

#function Hash_fun: calculate hash values
Hash_fun <- function(a,b,r){
  return(  (a*r+b) %%  PRIME)
}

#function MinHashing_value: apply minhashing 
MinHashing_value <- function(BinaryMatrix,HASHNUMBER){

  #create hashfunction coefficients
  dim_BM = dim(BinaryMatrix)
  if(dim_BM[1]>PRIME){
    print("Warning: prime number is smaller than it should be")
  }
  
  hashcoefficients = vector() 
  for (i in 1:HASHNUMBER) {
    a = as.integer(runif(1, min = 1, max = PRIME))
    b = as.integer(runif(1, min = 0, max = PRIME))
    pair = c(a,b)
    hashcoefficients = cbind(hashcoefficients,pair)
  }
  
  #print(hashcoefficients)
  #fill in signature matrix
  signature_matrix = matrix(data = Inf, nrow = HASHNUMBER, ncol = dim_BM[2]) 
  hashfunctionresult = vector(mode = "integer", length = HASHNUMBER)
  for (r in 1:dim_BM[1]) {
    #compute hashfunction
    for (h in 1:HASHNUMBER) {
      hashfunctionresult[h] = Hash_fun(hashcoefficients[1,h],hashcoefficients[2,h],r)
    }
    #print(hashfunctionresult)
    for (c in 1:dim_BM[2]) {
      if(BinaryMatrix[r,c] == 1){
        for (h in 1:HASHNUMBER) {
          if( hashfunctionresult[h] < signature_matrix[h,c] )
            signature_matrix[h,c] = hashfunctionresult[h]
        }
      }
    }
  }
  
  return(signature_matrix)
}

#LSH_alg: Local Sensitivity Hashing Algorithm
LSH_alg <- function(signature_matrix,b){
  dim_SM = dim(signature_matrix)
  r = dim_SM[1]/b
  CandidateMatrix = matrix(data = 0, nrow = dim_SM[2], ncol = dim_SM[2])
  CandidateMatrix[lower.tri(CandidateMatrix)] <- NA 
  band_matrix = signature_matrix[1:r,]
  for (i in 1:b){
    if(i == 1 ){
      band_matrix = signature_matrix[1:r,]
    }else{
      band_matrix = signature_matrix[((i-1)*r+1):(r*i),]
    }
    for (j in 1:(dim_SM[2]-1)) {
      col_fixed = band_matrix[,j]

      for (k in (j+1):dim_SM[2]) {
        if(identical(col_fixed, band_matrix[,k]) ){
          CandidateMatrix[j,k] = 1 
        }
      }
    }
  }
  return(CandidateMatrix)
}

#function LSH: Local Sensitivity Hashing
LSHonerow <- function(signature_matrix,b){
  dim_SM = dim(signature_matrix)
  r = 1
  CandidateMatrix = matrix(data = 0, nrow = dim_SM[2], ncol = dim_SM[2])
  CandidateMatrix[lower.tri(CandidateMatrix)] <- NA 
  band_matrix = vector()
  for (i in 1:b){
    band_matrix = signature_matrix[i,]
    for (j in 1:(dim_SM[2]-1)) {
      col_fixed = band_matrix[j]
      for (k in (j+1):dim_SM[2]) {
        if(identical(col_fixed, band_matrix[k]) ){
          CandidateMatrix[j,k] = 1 
        }
      }
    }
  }
  return(CandidateMatrix)
}

#function MSM: Multi-component Similarity Method
MSM <- function(ProductData, CandidateMatrix, MU, GAMMA){
  n = length(ProductData)
  disSim = matrix(data = 0, nrow = n, ncol = n)
  disSim[lower.tri(disSim)] <- NA 

  for (i in 1:(n-1)) {
    for (j in i:n) {
      product_i = TVData[[i]]
      product_j = TVData[[j]]
      if (SameShop(product_i,product_j) | CandidateMatrix[i,j] == 0 |  DiffBrand(product_i,product_j)){
        disSim[i,j] = Inf
      }else{
        sim = 0
        avgSim = 0
        m = 0 
        w = 0 
        nmk_i = TVData[[i]][["featuresMap"]] 
        nmk_j = TVData[[j]][["featuresMap"]]
          }
        }
        if(w > 0){
          avgSim = sim / w
        }
        #apply MW
        if(length(nmk_i==0)|length(nmk_j==0)){
          mwPerc = 0
        }else{
          mwPerc = MW(ExMW(nmk_i),ExMW(nmk_j))
        }
    }
  }
  return(disSim)
}
#function Bootstrap: generate bootstrapdata
BootStrap_data <-function(TVData){
  
  list_of_products = unique(sample(TVData, length(TVData), replace = T))
  list_of_products_test = setdiff(TVData, list_of_products)
  return(list('TVData_BS' = list_of_products, 'TVData_BS_Test' = list_of_products_test))
}

#function Estimation_matrix: tp,np,fp,fn values
Estimation_matrix = function(neighbor_matrix, list_of_products){
  TP = 0; FP = 0; TN = 0; FN = 0
  n_products = length(list_of_products)
  
  for (i in 1:n_products){
    for(j in 1:n_products){ 
      if(j>i && neighbor_matrix[i,j]==1){
        if(list_of_products[[i]]$modelID == list_of_products[[j]]$modelID){
          TP = TP + 1
        } else{FP = FP + 1}
      }
      else if(j>i){
        if(list_of_products[[i]]$modelID == list_of_products[[j]]$modelID){
          FN = FN + 1
        } else{TN = TN + 1}
      }
    }
  }
  writeLines(paste("confusion TP FP TN FN", TP,FP,TN,FN))
  return(list('TP'= TP, 'FP'=FP, 'TN'=TN, 'FN'=FN)) 
}

#function Evaluation: compute evaluation values
Evaluation <-function(Estimation_matrix,B_LSH,n,band){
  if(B_LSH == TRUE){
    Q = ((Estimation_matrix$TP) / (n*band))
  }else{
    Q = (Estimation_matrix$TP) / (Estimation_matrix$TP + Estimation_matrix$FP)
  }
  
  C = Estimation_matrix$TP / (Estimation_matrix$TP + Estimation_matrix$FN)
  F1 = 2/((1/PQ)+(1/PC))
  Comp = ((sum(1:(n-2))+n-2)*band) /((sum(1:(n-2))+n-2)*HASHNUMBER)
  #print(Estimation_matrix$TP)
  #print((Estimation_matrix$TP + Estimation_matrix$FP))
  #print((Estimation_matrix$TP + Estimation_matrix$FN))
  
  return(list('Q'= Q, 'C'=C, 'F1'=F1, 'Comp' = C))
}

#function EstimateAlgorithm: execute algorithm
EstimateAlgorithm <- function(TVData_BS,...){
  bandsizes = BandSizes(HASHNUMBER)
  print(bandsizes)
  allTV_titles = TV_titles(TVData_BS)
  SignatureValues = MinHashing_value(BinaryMatrix,HASHNUMBER)
  
  Total_BS <- matrix(data = NA, nrow = length(bandsizes), ncol = 5)
  for (b in 1:length(bandsizes)) {
    band = bandsizes[b]
    writeLines(paste("amount of bands", band))
    if(b == (length(bandsizes))){
      Potential_dup = LSHonerow(SignatureValues,band)
    }else{
      Potential_dup = LSH_alg(SignatureValues,band)
    }
    ConfusionMatLSH <- confusionMatrix(data=Potential_dup, reference = EstimateAlgorithm)
    EvaluationLSH  = Evaluation(ConfusionMatLSH,TRUE,length(TVData_BS),band)
    #print(EvaluationLSH)
    TotalEvaluation_BS[b,1:4] = unlist(EvaluationLSH,)
    colnames(Total_BS) <- c("Q","C","F1Star","Comp", "F1")
  }
  print(Total_BS)
 }

#Draw ggplot2 scatterplot
df = as.data.frame(TotalEvaluation_BS)

names(df) = c("Quality", 'Completeness', 'F1*-Measure', 
                      'Comparisons', 'F1-Measure')
                                
q <- ggplot(df, aes("Comparisons","Quality'")) + 
  geom_line()
q + theme_classic()

c <- ggplot(df, aes("Comparisons","Completeness")) + 
    geom_line()
c + theme_classic()

f1s <- ggplot(df, aes("Comparisons","F1*-Measure")) + 
      geom_line()
f1s + theme_classic()

f1 <- ggplot(df, aes("Comparisons","F1-Measure")) + 
      geom_line()
f1 + theme_classic()

